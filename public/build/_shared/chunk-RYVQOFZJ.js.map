{
  "version": 3,
  "sources": ["../../../node_modules/jwt-decode/build/esm/index.js", "../../../app/utils/authApi.ts"],
  "sourcesContent": ["export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils\\\\authApi.ts\"\n);\nimport.meta.hot.lastModified = \"1743103587400.0454\";\n}\n// REMIX HMR END\n\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\n\r\nconst API_URL = import.meta.env.VITE_API_URL;\r\nconsole.log(\"API_URL:\", API_URL);\r\n\r\n\r\ninterface DecodedToken {\r\n  IdUsuario: string;\r\n  Email: string;\r\n  Rol: string;\r\n  exp: number;\r\n}\r\n\r\nexport async function loginRequest(correo: string, contrasena: string) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/api/auth/login`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ correo, contrasena }),\r\n \r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || \"Error al iniciar sesi\u00F3n\");\r\n    }\r\n\r\n    localStorage.setItem(\"token\", data.token);\r\n\r\n    // Decodificar el token para obtener el rol\r\n    const decoded: DecodedToken = jwtDecode(data.token);\r\n    localStorage.setItem(\"rol\", decoded.Rol);\r\n\r\n    return { token: data.token, rol: decoded.Rol };\r\n  } catch (error: any) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport async function forgotPasswordRequest(email: string) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/api/password/forgot`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ correo: email }), // \r\n      mode: \"cors\",\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || \"Error al enviar la solicitud de recuperaci\u00F3n\");\r\n    }\r\n\r\n    return data;\r\n  } catch (error: any) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n\r\n\r\nexport async function resetPasswordRequest(TokenRecuperacion: string, NuevaContrasena: string, ConfirmarContrasena: string) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/api/password/reset`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ TokenRecuperacion, NuevaContrasena, ConfirmarContrasena }), // Enviar el token y las contrase\u00F1as\r\n      mode: \"cors\",\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || \"Error al restablecer la contrase\u00F1a\");\r\n    }\r\n\r\n    return data;\r\n  } catch (error: any) {\r\n    throw new Error(error.message);\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
